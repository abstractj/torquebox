<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="pooling">
  <title>Runtime Pooling</title>

  <para>To run Ruby code inside a Java application server, the TorqueBox
  platform requires a Ruby interpreter, provided by <ulink
  url="http://www.jruby.org">JRuby</ulink>. TorqueBox provides a simple but
  flexible means of mapping the app server's threads of execution to one or
  more Ruby interpreters, giving you complete concurrency control, but the
  defaults should be reasonable.</para>

  <section id="types-of-pools">
    <title>Types of Runtime Pools</title>

    <para>TorqueBox defines three types of pools from which a Ruby interpreter
    may be obtained:</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>Bounded</para>
      </listitem>

      <listitem>
        <para>Shared</para>
      </listitem>
    </itemizedlist>

    <formalpara>
      <title>Bounded pools</title>

      <para>A bounded pool is a typical resource pool with minimum and maximum
      capacity. Each interpreter managed by the pool is given out to a single
      client at a time. It is unavailable for any other client until the
      current owner returns it to the pool. The pool will ensure that a
      minimum number of interpreters are kept in the pool at all times.
      Additionally, a maximum capacity is specified to ensure that the pool
      does not grow unbounded. Clients requesting an interpreter from a pool
      with no available interpreters will block until an interpreter becomes
      available. Interpreters may become available through other clients
      returning an existing interpreter, or by the pool spinning up additional
      interpreters, if it has not reached its maximum capacity.</para>
    </formalpara>

    <formalpara>
      <title>Shared pools</title>

      <para>A shared pool is a false pool. A shared pool contains one Ruby
      interpreter that is allowed to be shared, concurrently, with an
      unbounded number of clients. A shared pool may only be used in cases
      where the application is considered threadsafe. An application's
      threadsafety may be affected by both framework code and deployment
      factors. These issues are discussed below.</para>
    </formalpara>
  </section>

  <section id="subsystem-pools">
    <title>Subsystem Pools</title>

    <para>As noted above, an advanced application may use the functionality of
    multiple subsystems. Each susbsystem is configured to use a distinct pool
    in order to provide a modicum of isolation and prevent wayward
    interaction. The configuration of various subsystem pools are affected by
    how the application is deployed. Each subsystem is automatically
    configured using reasonable defaults, but may be completely configured
    manually through the <filename>pooling.yml</filename> deployment
    descriptor.</para>

    <formalpara>
      <title>Web (Rack)</title>

      <para>The web subsystem, powering Rack applications, defaults to
      deploying a <emphasis>shared</emphasis> pool. Modern frameworks have
      mostly moved away from their assumption of single-threaded applications.
      By using a shared pool, resources are conserved, and a single Ruby
      interpreter may handle all requests from web clients.</para>
    </formalpara>

    <formalpara>
      <title>Scheduled Jobs</title>

      <para>The pool deployed for the scheduled jobs subsystem varies based on
      the deployment mode of the application. In <code>development</code>
      mode, automatic code-reloading is desirable, but multiple jobs executing
      and/or resetting the application within a single interpreter causes race
      conditions and poor interactions. For this reason, a non-shared
      <emphasis>bounded pool</emphasis> is configured when the application is
      deployed in <code>development</code> mode. In
      non-<code>development</code> deployments, reloading is disabled, and the
      race conditions do not exist. In the non-development cases, a more
      efficient <emphasis>shared pool</emphasis> is configured for the
      application.</para>
    </formalpara>

    <formalpara>
      <title>Message Processors</title>

      <para>As with the jobs subsystem, asynchronous message processing
      introduces race conditions between processors executing and processors
      attempted to reset the application. Likewise, the pool for the message
      processor subsystem uses a <emphasis>bounded pool</emphasis> when the
      application is deployed in development mode, otherwise it uses the more
      efficient <emphasis>shared pool</emphasis> strategy.</para>
    </formalpara>
  </section>

  <section id="pooling-yaml-configuration">
    <title>YAML Configuration</title>

    <para>If your application is not designed to be thread-safe, you can
    instead pool the interpreters resulting in a single-threaded model. You
    can do this for jobs, messaging, and/or web requests. Typically, if your
    application creates and uses global variables to manage state for a single
    web request, you may have problems with the default multi-threaded
    behavior.</para>

    <para>To modify the default interpreter pool configuration, you can add
    pooling: section to either your application's internal
    <filename>torquebox.yml</filename> deployment descriptor, or through an
    external <filename><replaceable>*</replaceable>-knob.yml</filename>
    descriptor. This section is always optional, and only required if you wish
    to modify the defaults.</para>

    <section id="pooling-yaml-configuration-syntax">
      <title>Syntax</title>

      <para>Within <filename>pooling.yml</filename>, a section may be added
      for each susbsystem you desire to explicitly configure. Any subsystem
      not mentioned will be configured with its defaults. Configuration of
      each type of pool is slightly different.</para>

      <informaltable>
        <tgroup cols="2">
          <colspec align="left" />

          <thead>
            <row>
              <entry>Subsystem</entry>

              <entry>Key</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Web/Rack</entry>

              <entry><code>web</code></entry>
            </row>

            <row>
              <entry>Scheduled jobs</entry>

              <entry><code>jobs</code></entry>
            </row>

            <row>
              <entry>Message Processors &amp; Async Tasks</entry>

              <entry><code>messaging</code></entry>
            </row>

            <row>
              <entry>Services</entry>

              <entry><code>services</code></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <formalpara>
        <title>Bounded pools</title>

        <para>A bounded pool requires two parameters:
        <parameter>min</parameter> and <parameter>max</parameter>. The
        <parameter>min</parameter> parameter specifies the minimum number of
        managed interpreters that pool should initialize itself with. The
        <parameter>max</parameter> parameter specifies the largest capacity
        the pool should ever grow to in order to satisfy client
        requests.</para>
      </formalpara>

      <example>
        <title>Configuring a bounded pool</title>

        <para><programlisting>pooling:
  web:
    min: 3
    max: 10</programlisting></para>
      </example>

      <formalpara>
        <title>Shared pools</title>

        <para>A shared pool has no configuration other than indicating a
        subsystem should use a shared pool.</para>
      </formalpara>

      <example>
        <title>Configuring a shared pool</title>

        <para><programlisting>pooling:
  web: shared</programlisting></para>
      </example>

      <formalpara>
        <title>Global pool</title>

        <para>A global pool has no configuration other than indicating a
        susbsystem should use the global pool.</para>
      </formalpara>

      <example>
        <title>Configuring a global pool</title>

        <para><programlisting>pooling:
  web: global</programlisting></para>
      </example>
    </section>

    <section id="pooling-yaml-examples">
      <title>Examples</title>

      <example id="pooling-yaml-examples-default">
        <title>Default development-mode pooling</title>

        <para><programlisting>application:
  <replaceable>...</replaceable>

pooling:
  jobs: 
    min: 1
    max: 2
  messaging:
    min: 1
    max: 2
  web: shared</programlisting>The following is the implicit default
        configuration for an application deployed in <code>development</code>
        mode.</para>
      </example>

      <example id="pooling-yaml-examples-non-devmode">
        <title>Default non-development-mode pooling</title>

        <para><programlisting>application:
  ...

pooling:
  jobs: shared
  messaging: shared
  web: shared</programlisting>The following is the implicit default
        configuration for an application deployed in a mode other than
        <code>development</code>.</para>
      </example>
    </section>
  </section>
</chapter>
